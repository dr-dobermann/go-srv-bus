// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sb_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvBusClient is the client API for SrvBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvBusClient interface {
	// checks if given server is present of service bus or
	// asks for available MessageServer (if id in request
	// is uuid.Nil 00000000-0000-0000-0000-000000000000
	// or just nil).
	//
	// if returned nil uuid, then there is no particular message server
	// or there is no runned message server on the bus
	GetMessageServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	GetEventServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	GetServiceServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type srvBusClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvBusClient(cc grpc.ClientConnInterface) SrvBusClient {
	return &srvBusClient{cc}
}

func (c *srvBusClient) GetMessageServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/srvbus_proto.SrvBus/GetMessageServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvBusClient) GetEventServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/srvbus_proto.SrvBus/GetEventServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvBusClient) GetServiceServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/srvbus_proto.SrvBus/GetServiceServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvBusServer is the server API for SrvBus service.
// All implementations must embed UnimplementedSrvBusServer
// for forward compatibility
type SrvBusServer interface {
	// checks if given server is present of service bus or
	// asks for available MessageServer (if id in request
	// is uuid.Nil 00000000-0000-0000-0000-000000000000
	// or just nil).
	//
	// if returned nil uuid, then there is no particular message server
	// or there is no runned message server on the bus
	GetMessageServer(context.Context, *ServerRequest) (*ServerResponse, error)
	GetEventServer(context.Context, *ServerRequest) (*ServerResponse, error)
	GetServiceServer(context.Context, *ServerRequest) (*ServerResponse, error)
	mustEmbedUnimplementedSrvBusServer()
}

// UnimplementedSrvBusServer must be embedded to have forward compatible implementations.
type UnimplementedSrvBusServer struct {
}

func (UnimplementedSrvBusServer) GetMessageServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageServer not implemented")
}
func (UnimplementedSrvBusServer) GetEventServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventServer not implemented")
}
func (UnimplementedSrvBusServer) GetServiceServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceServer not implemented")
}
func (UnimplementedSrvBusServer) mustEmbedUnimplementedSrvBusServer() {}

// UnsafeSrvBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvBusServer will
// result in compilation errors.
type UnsafeSrvBusServer interface {
	mustEmbedUnimplementedSrvBusServer()
}

func RegisterSrvBusServer(s grpc.ServiceRegistrar, srv SrvBusServer) {
	s.RegisterService(&SrvBus_ServiceDesc, srv)
}

func _SrvBus_GetMessageServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvBusServer).GetMessageServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvbus_proto.SrvBus/GetMessageServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvBusServer).GetMessageServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvBus_GetEventServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvBusServer).GetEventServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvbus_proto.SrvBus/GetEventServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvBusServer).GetEventServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvBus_GetServiceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvBusServer).GetServiceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srvbus_proto.SrvBus/GetServiceServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvBusServer).GetServiceServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvBus_ServiceDesc is the grpc.ServiceDesc for SrvBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srvbus_proto.SrvBus",
	HandlerType: (*SrvBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageServer",
			Handler:    _SrvBus_GetMessageServer_Handler,
		},
		{
			MethodName: "GetEventServer",
			Handler:    _SrvBus_GetEventServer_Handler,
		},
		{
			MethodName: "GetServiceServer",
			Handler:    _SrvBus_GetServiceServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sb.proto",
}
